Dijkstra Algorithm

Given a weighted, undirected and connected graph where you have given adjacency list adj. 
You have to find the shortest distance of all the vertices from the source vertex src, 
and return a list of integers denoting the shortest distance between each node and source vertex src.

Note: The Graph doesn't contain any negative weight edge.
.........................BY PRIORTY QUEUE(MINHEAP)....................................
class Solution {
  public:
    // Function to find the shortest distance of all the vertices
    // from the source vertex src.
    vector<int> dijkstra(vector<vector<pair<int, int>>> &adj, int src) {
        vector<int>res(adj.size(),INT_MAX);
        priority_queue<pair<int,int>,vector<pair<int,int>>,
        greater<pair<int,int>>>minHeap;
        res[src]=0;
        minHeap.push({0,src});
        while(!minHeap.empty()){
            int dist=minHeap.top().first;
            int node=minHeap.top().second;
            minHeap.pop();
            for(auto &vec:adj[node]){
                int adjNode=vec.first;
                int wt=vec.second;
                if(dist+wt<res[adjNode]){
                    res[adjNode]=dist+wt;
                    minHeap.push({dist+wt,adjNode});
                }
            }
        }
        return res;
    }
};


.............................BY SET..............................................WHY.............................BECAUSE ERASE FACILITY.............................
class Solution {
  public:
    // Function to find the shortest distance of all the vertices
    // from the source vertex src.
    vector<int> dijkstra(vector<vector<pair<int, int>>> &adj, int src) {
       vector<int>res(adj.size(),INT_MAX);
       set<pair<int,int>>st;
       res[src]=0;
       st.insert({0,src});
       while(!st.empty()){
           auto &it=*st.begin();
           int d=it.first;
           int node=it.second;
          st.erase(it);
          for(auto &vec:adj[node]){
              int adjNode=vec.first;
              int wt=vec.second;
              if(d+wt<res[adjNode]){
                  if(res[adjNode]!=INT_MAX){
                      st.erase({res[adjNode],adjNode});
                      
                  }
                  res[adjNode]=d+wt;
                  st.insert({d+wt,adjNode});
              }
          }
       }
       return res;
    }
};

