Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

...............................Solved by BFS.........................

class Solution {
public:
    vector<vector<int>> directions{{1, 1},  {0, 1},   {1, 0},  {-1, 0},
                                   {0, -1}, {-1, -1}, {1, -1}, {-1, 1}};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        if (m == 0 || n == 0 || grid[0][0] != 0) {
            return -1;
        }
        auto isSafe = [&](int x, int y) {
            if (x >= 0 && x < m && y >= 0 && y < n) {
                return true;
            }
            return false;
        };
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        int level = 0;
        while (!q.empty()) {
            int N = q.size();
            while (N--) {
                auto curr = q.front();
                q.pop();
                int x = curr.first;
                int y = curr.second;
                if (x == m - 1 && y == n - 1)
                    return level + 1;
                for (auto dir : directions) {
                    int x_ = x + dir[0];
                    int y_ = y + dir[1];
                    if (isSafe(x_, y_) && grid[x_][y_] == 0) {
                        q.push({x_, y_});
                        grid[x_][y_] = 1;
                    }
                }
            }
            level++;
        }
        return -1;
    }
};

.........................Solved by Dijsktra...................
class Solution {
public:
#define P pair <int, pair<int, int>> 
    vector<vector<int>> directions{{1, 1},  {0, 1},   {1, 0},  {-1, 0},
                                   {0, -1}, {-1, -1}, {1, -1}, {-1, 1}};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        if (m == 0 || n == 0 || grid[0][0] != 0) {
            return -1;
        }
        auto isSafe = [&](int x, int y) {
            if (x >= 0 && x < m && y >= 0 && y < n) {
                return true;
            }
            return false;
        };
        vector<vector<int>> res(m, vector<int>(n, INT_MAX));
        priority_queue<P, vector<P>, greater<P>> pq;
        pq.push({0, {0, 0}});
        res[0][0] = 0;
        while (!pq.empty()) {
            int d = pq.top().first;
            pair<int, int> node = pq.top().second;
            int x = node.first;
            int y = node.second;
            pq.pop();
            for (auto& dir : directions) {
                int x_ = x + dir[0];
                int y_ = y + dir[1];
                int dist = 1;
                if (isSafe(x_, y_) && grid[x_][y_] == 0 &&
                    d + dist < res[x_][y_]) {
                    pq.push({d + dist, {x_, y_}});
                    res[x_][y_] = d + dist;
                }
            }
        }
        if (res[m - 1][n - 1] == INT_MAX) {
            return -1;
        }
        return res[m - 1][n - 1] + 1;
    }
};
