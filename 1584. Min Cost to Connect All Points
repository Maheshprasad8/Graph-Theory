You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].

The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.

Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.

..............................minimum spanning tree approch...........................
typedef pair<int,int>P;
class Solution {
    private:
    int PrimsAlgo(vector<vector<P>>&adj,int V){
        priority_queue<P,vector<P>,greater<P>>minHeap;
        int sum=0;
        minHeap.push({0,0});
        vector<bool>inMST(V,false);
        while(!minHeap.empty()){
            auto p=minHeap.top();
            minHeap.pop();
            int wt=p.first;
            int node=p.second;
            if(inMST[node]==true)
            continue;
            inMST[node]=true;
            sum+=wt;
            for(auto &temp:adj[node]){
                int nbr=temp.first;
                int nbr_wt=temp.second;
                if(!inMST[nbr]){
              minHeap.push({nbr_wt,nbr});

                }
            }
        }
        return sum;
    }
public:

    int minCostConnectPoints(vector<vector<int>>& points) {
        // Minimum spanning tree 
        
      int V=points.size();
      vector<vector<P>>adj(V);
      for(int i=0;i<V;i++){
        for(int j=i+1;j<V;j++){
            int x1=points[i][0];
            int y1=points[i][1];
            int x2=points[j][0];
            int y2=points[j][1];
            int d=abs(x1-x2)+abs(y1-y2);
            adj[i].push_back({j,d});
            adj[j].push_back({i,d});

        }
      }
      return PrimsAlgo(adj,V);
    }
};
