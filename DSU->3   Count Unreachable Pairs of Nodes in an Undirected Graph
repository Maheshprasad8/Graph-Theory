2316. Count Unreachable Pairs of Nodes in an Undirected Graph
Solved
Medium
Topics
Companies
Hint
You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. 
You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

Return the number of pairs of different nodes that are unreachable from each other.
.....................................Solved by DSU.............................................

class Solution {
public:
    vector<int> parent;
    vector<int> rank;
    int find(int x) {
        if (x == parent[x]) {
            return x;
        }
        return parent[x] = find(parent[x]);
    }

    void Union(int x, int y) {
        int x_parent = find(x);
        int y_parent = find(y);
        if (x_parent == y_parent) {
            return;
        }
        if (rank[x_parent] > rank[y_parent]) {
            parent[y_parent] = x_parent;
        } else if (rank[y_parent] > rank[x_parent]) {
            parent[x_parent] = y_parent;
        } else {
            parent[x_parent] = y_parent;
            rank[y_parent]++;
        }
    }
    long long countPairs(int n, vector<vector<int>>& edges) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        // step-2 make ilaka
        // Making components
        for (auto& vec : edges) {
            int u = vec[0];
            int v = vec[1];
            Union(u, v);
        }
        // step-3 for storing parents coresponding to size node
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) {
            int compi = find(i);
            mp[compi]++;
        }
        // step-4  process for result
        long long res = 0;
        long long remaining = n;
        for (auto& it : mp) {
            long long size = it.second;
            res += (size) * (remaining - size);
            remaining -= size;
        }
        return res;
    }
};
