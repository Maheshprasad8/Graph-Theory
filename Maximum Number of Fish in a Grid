You are given a 0-indexed 2D matrix grid of size m x n, where (r, c) represents:

A land cell if grid[r][c] = 0, or
A water cell containing grid[r][c] fish, if grid[r][c] > 0.
A fisher can start at any water cell (r, c) and can do the following operations any number of times:

Catch all the fish at cell (r, c), or
Move to any adjacent water cell.
Return the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists.

An adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.

.........................................DFS && BFS  && DSU. .........................................................................

class Solution {
public:
    vector<vector<int>> direction = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    int dfs(vector<vector<int>>& grid, int i, int j,
            vector<vector<bool>>& vis) {
        int r = grid.size();
        int c = grid[0].size();
        vis[i][j] = true;
        int cnt = grid[i][j];

        for (vector<int>& dir : direction) {
            int i_ = i + dir[0];
            int j_ = j + dir[1];
            if (i_ >= 0 && i_ < r && j_ >= 0 && j_ < c && !vis[i_][j_] &&
                grid[i_][j_] > 0) {
                cnt += dfs(grid, i_, j_, vis);
            }
        }

        return cnt;
    }


int bfs(int i,int j,vector<vector<int>>& grid){
    int r=grid.size();
    int c=grid[0].size();
    queue<pair<int,int>>q;
    q.push({i,j});
    int fishcnt=grid[i][j];
   grid[i][j]=0;
   while(!q.empty()){
    i=q.front().first;
    j=q.front().second;
    q.pop();
    for(auto &dir:direction){
        int i_=i+dir[0];
        int j_=j+dir[1];
        if(i_>=0 && i_<r && j_>=0 && j_<c && grid[i_][j_]>0){
            q.push({i_,j_});
            fishcnt+=grid[i_][j_];
            grid[i_][j_]=0;

        }
    }
   }
return fishcnt;
}


    int findMaxFish(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        int maxm = 0;
        int cnt = 0;
        vector<vector<bool>> vis(r, vector<bool>(c, false));
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] > 0 && !vis[i][j]) {
                    // maxm = max(maxm, dfs(grid, i, j, vis));
                    maxm=max(maxm,bfs(i,j,grid));
                }
            }
        }
        // maxm=max(maxm,cnt);
        return maxm;
    }
};


..........................................DSU...............................................................



class DSU{
    vector<int>parent;
    vector<int>rank;
    public:
   
    DSU(int n){
        parent.resize(n);
        rank.resize(n);
        for(int i=0;i<n;i++){
            parent[i]=i;
            rank[i]=0;

        }
    }
int find(int x){
    if(parent[x]==x){
        return x;
    }
    return parent[x]=find(parent[x]);
}
void Union(int x,int y){
    int x_parent=find(x);
    int y_parent=find(y);
    if(x_parent==y_parent){
        return;
    }
    if(rank[x_parent]>rank[y_parent]){
        parent[y_parent]=x_parent;
        rank[x_parent]+=rank[y_parent];
    }
    else if(rank[x_parent]<rank[y_parent]){
        parent[x_parent]=y_parent;
        rank[y_parent]+=rank[x_parent];
    }
    else{
        parent[x_parent]=y_parent;
        rank[y_parent]+=rank[x_parent];
    }
}

void setSize(int idx,int fishcnt){
    rank[idx]=fishcnt;
}
int getmaxfishcnt(){
    return *max_element(rank.begin(),rank.end());
}
};

class Solution {

    public:
     vector<vector<int>>direction={{0,1},{0,-1},{1,0},{-1,0}};
    int findMaxFish(vector<vector<int>>& grid) {
       int m=grid.size();
       int n=grid[0].size();
int totalCell=m*n;
DSU dsu(totalCell);
for(int i=0;i<m;i++){
    for(int j=0;j<n;j++){
        if(grid[i][j]>0){
            int idx=i*n+j;
        dsu.setSize(idx,grid[i][j]);
        }
    }
}
for(int i=0;i<m;i++){
    for(int j=0;j<n;j++){
        if(grid[i][j]>0){
            int idx=i*n+j;
            for(auto &dir:direction){
                int i_=i+dir[0];
                int j_=j+dir[1];
                if(i_>=0 && i_<m && j_>=0 && j_<n && grid[i_][j_]>0){
                int new_idx=i_*n+j_;
                
                dsu.Union(idx,new_idx);
            }
            }
        }
    }
}
return dsu.getmaxfishcnt();
    }
};
