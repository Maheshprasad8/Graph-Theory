Minimum Spanning TreeGiven a weighted, undirected, and connected graph with V vertices and E edges, 
your task is to find the sum of the weights of the edges in the Minimum Spanning Tree (MST) of the graph. The graph is represented by an adjacency list,
where each element adj[i] is a vector containing vector of integers. 
Each vector represents an edge, with the first integer denoting the endpoint of the edge and the second integer denoting the weight of the edge.

.........................Kruskal's Algorith..............................................
class Solution {
  public:
//   typedef
vector<int>parent;
vector<int>rank;
  int find(int x){
     if(x==parent[x]){
         return x;
     } 
     return parent[x]=find(parent[x]);
  }
  void Union(int x,int y){
      int x_parent=find(x);
      int y_parent=find(y);
      if(x_parent==y_parent){
          return;
      }
      if(rank[x_parent]>rank[y_parent]){
          parent[y_parent]=x_parent;
      }
      else if(rank[y_parent]>rank[x_parent]){
          parent[x_parent]=y_parent;
      }
      else{
         parent[y_parent] = x_parent;
            rank[x_parent]++;
      }
  }
  int Kruskal(vector<vector<int>>&vec){
      int sum=0;
      for(auto &temp:vec){
          int u=temp[0];
          int v=temp[1];
          int wt=temp[2];
          int parent_u=find(u);
          int parent_v=find(v);
          if(parent_u!=parent_v){
              Union(u,v);
              sum+=wt;
          }
      }
      return sum;
  }
    // Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[]) {
       parent.resize(V);
       rank.resize(V,0);
       for(int i=0;i<V;i++){
           parent[i]=i;
       }
       vector<vector<int>>vec;
       for(int u=0;u<V;u++){
           for(auto &temp:adj[u]){
               int v=temp[0];
               int wt=temp[1];
               vec.push_back({u,v,wt});
           }
       }
       auto comprater=[&](vector<int>&v1,vector<int>&v2){
           return v1[2]<v2[2];
       };
       sort(vec.begin(),vec.end(),comprater);
       return Kruskal(vec);
       
    }
};
