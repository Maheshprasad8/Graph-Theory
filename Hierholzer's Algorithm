2097. Valid Arrangement of Pairs

You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. 
An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti.

Return any valid arrangement of pairs.

Note: The inputs will be generated such that there exists a valid arrangement of pairs.

 ...............................................................

class Solution {
public:
    vector<vector<int>> validArrangement(vector<vector<int>>& pairs) {
       unordered_map<int,vector<int>>adj;
       //    build indegree and outdegree // 

       unordered_map<int,int>indegree,outdegree;
       for(auto pair:pairs){
        int u=pair[0];
        int v=pair[1];
        adj[u].push_back(v);
       outdegree[u]++;
       indegree[v]++;
       }
    // find the start node of ep
    int startNode=pairs[0][0];
    for(auto &it:adj){
        int node=it.first;
        if(outdegree[node]-indegree[node]==1){
            startNode=node;
            break;
        }
    }
// step-4 do DFS
vector<int>Eulerpath;
stack<int>st;
 st.push(startNode);
while(!st.empty()){
    int curr=st.top();
    if(!adj[curr].empty()){
        int nbr=adj[curr].back();
        adj[curr].pop_back();
        st.push(nbr);
    }
    else{
        Eulerpath.push_back(curr);
        st.pop();
    }
}
reverse(Eulerpath.begin(),Eulerpath.end());
vector<vector<int>>ans;
for(int i=0;i<Eulerpath.size()-1;i++){
    ans.push_back({Eulerpath[i],Eulerpath[i+1]});
}
return ans;
    }
};
