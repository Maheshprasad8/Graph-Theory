You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.


Example 1:

Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.

.......................................DFS && map && unique id.....................................

class Solution {
public:
    int n;
    vector<vector<int>> direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    int DFS(vector<vector<int>>& grid, int i, int j, vector<vector<bool>>& vis,
            int id) {
        if (i < 0 || i >= n || j < 0 || j >= n || grid[i][j] == 0 ||
            vis[i][j]) {
            return 0;
        }
        grid[i][j] = id;
        vis[i][j] = true;
        int cnt = 1;
        for (vector<int>& dir : direction) {
            int i_ = i + dir[0];
            int j_ = j + dir[1];
            cnt += DFS(grid, i_, j_, vis, id);
        }
        return cnt;
    }

    int largestIsland(vector<vector<int>>& grid) {
        n = grid.size();
        int maxArea = 0;
        vector<vector<bool>> visited(n, vector<bool>(n, false));
        int id = 2;
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    int size = DFS(grid, i, j, visited, id);
                    maxArea = max(maxArea, size);
                    mp[id] = size;
                    id++;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    unordered_set<int> uniqueId;
                    for (auto& dir : direction) {
                        int i_ = i + dir[0];
                        int j_ = j + dir[1];
                        if (i_ >= 0 && i_ < n && j_ >= 0 & j_ < n &&
                            grid[i_][j_] != 0) {
                            uniqueId.insert(grid[i_][j_]);
                        }
                    }
                    int overallsize = 1;
                    for (auto& id : uniqueId) {
                        overallsize += mp[id];
                    }
                    maxArea = max(maxArea, overallsize);
                }
            }
        }
        return maxArea;
    }
};
