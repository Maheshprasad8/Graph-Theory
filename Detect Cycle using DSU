Given an undirected graph with no self loops with V (from 0 to V-1) nodes and E edges, the task is to check if there is any cycle in the undirected graph.

Note: Solve the problem using disjoint set union (DSU).



..........GeeksforGeeks................

class Solution
{
    public:
    
vector<int>parent;
vector<int>rank;
int find(int x){
    if(x==parent[x]){
        return x;
    }
    return parent[x]=find(parent[x]);
}

void Union(int x,int y){
    int x_parent=find(x);
    int y_parent=find(y);
    if(x_parent==y_parent){
        return;
    }
    // jo bada usko parent bna do
    if(rank[x_parent]<y_parent){
        parent[x_parent]=y_parent;
    }
    else if(rank[x_parent]>y_parent){
        parent[y_parent]=x_parent;
    }
    else{
        // kisi ko bhi parnet bna do agar rank equal hai
        parent[x_parent]=y_parent;
        rank[y_parent]++;
    }
}
	int detectCycle(int V, vector<int>adj[])
	{
	    parent.resize(V);
	    rank.resize(V);
	    for(int i=0;i<V;i++){
	        parent[i]=i;
	        rank[i]=1;
	    }
	   for(int u=0;u<V;u++){
	       for(int &v:adj[u]){
	           if(u<v){
	               int parent_u=find(u);
	               int parent_v=find(v);
	               if(parent_u==parent_v){
	                   return true;
	               }
	               Union(u,v);
	           }
	       }
	   }
	  return false;
	}
};
