In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added.
The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n 
where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

.........................................DFS && DSU................................

class Solution {
public:
// vector<int>parent;
// vector<int>rank;
// int find(int x){
//     if(x==parent[x]){
//         return x;
//     }
//     return parent[x]=find(parent[x]);
// }
// void Union(int x,int y){
//     int x_parent=find(x);
//     int y_parent=find(y);
//     if(x_parent==y_parent){
//         return;
//     }
//     if(rank[x_parent]>rank[y_parent]){
//         parent[x_parent]=y_parent;

//     }
//     else if(rank[x_parent]<rank[y_parent]){
//         parent[y_parent]=x_parent;
//     }
//     else{
//         parent[x_parent]=y_parent;
//         rank[y_parent];
//     }
// }
bool dfs( unordered_map<int,vector<int>>&adj,int u,int v,vector<bool>&visited){
    visited[u]=true;
    if(u==v){
        return true;
    }
    for(int &nbr:adj[u]){
        if(visited[nbr]){
        continue;
        }
        if(dfs(adj,nbr,v,visited)){
            return true;
        }
    }
    return false;
}
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        vector<int>ans;
        int r=edges.size();
        int c=edges[0].size();
        unordered_map<int,vector<int>>adj;
        for(int i=0;i<r;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            vector<bool>visited(r,false);
            if(adj.find(u)!=adj.end() && adj.find(v)!=adj.end() && dfs(adj,u,v,visited)){
                return edges[i];
            }
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
// parent.resize(r+1,-1);
// rank.resize(r+1,0);
// for(int i=1;i<=r;i++){
//     parent[i]=i;
// }

// for(auto &vec:edges){
//     int u=vec[0];
//     int v=vec[1];
//     if(find(u)==find(v)){
//         return vec;
//     }
//     Union(u,v);
// }
return {};
    }
};
