Given an undirected graph with V vertices numbered from 0 to V-1 and E edges, represented by 2d array edges[][], where edges[i]=[u,v]
represents the edge between the vertices u and v. Determine whether a specific edge between two vertices (c, d) is a bridge.

Note:

An edge is called a bridge if removing it increases the number of connected components of the graph.
if thereâ€™s only one path between c and d (which is the edge itself), then that edge is a bridge.

....................................................................




class Solution {
public:
    int timer = 0;
    bool isBridgeUtil(int node, int parent, vector<int> adj[], vector<int>& vis, 
                      vector<int>& tin, vector<int>& low, int c, int d) {
        vis[node] = 1;
        tin[node] = low[node] = timer++;

        for (int neighbor : adj[node]) {
            if (neighbor == parent) continue;

            if (!vis[neighbor]) {
                if (isBridgeUtil(neighbor, node, adj, vis, tin, low, c, d))
                    return true;

                low[node] = min(low[node], low[neighbor]);

                // Check for bridge
                if ((tin[node] < low[neighbor] && 
                     ((node == c && neighbor == d) || (node == d && neighbor == c)))) {
                    return true;
                }

            } else {
                // Back edge
                low[node] = min(low[node], tin[neighbor]);
            }
        }

        return false;
    }

    bool isBridge(int V, vector<vector<int>> &edges, int c, int d) {
        vector<int> adj[V];
        for (auto& edge : edges) {
            int u = edge[0], v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<int> vis(V, 0);
        vector<int> tin(V, -1), low(V, -1);

        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (isBridgeUtil(i, -1, adj, vis, tin, low, c, d))
                    return true;
            }
        }

        return false;
    }
};

