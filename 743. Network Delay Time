You are given a network of n nodes, labeled from 1 to n. 
You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), 
where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. 
If it is impossible for all the n nodes to receive the signal, return -1.

............................Solved by Dijsktra...............
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        unordered_map<int, vector<pair<int, int>>> adj;
        for (int i = 0; i < times.size(); i++) {
            int u = times[i][0];
            int v = times[i][1];
            int w = times[i][2];
            adj[u].push_back({v, w});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>,
                       greater<pair<int, int>>>
            minHeap;
        vector<int>ans(n+1,INT_MAX);
        ans[k] = 0;
        minHeap.push({0, k});
        while (!minHeap.empty()) {
            int d = minHeap.top().first;
            int node = minHeap.top().second;
            minHeap.pop();
            for (auto& vec : adj[node]) {
                int adjNode = vec.first;
                int wt = vec.second;
                if (d + wt < ans[adjNode]) {
                    ans[adjNode] = d + wt;
                    minHeap.push({d + wt, adjNode});
                }
            }
        }
        int res = 0; // Start with 0
        for (int i = 1; i <= n; i++) {
            if (ans[i] == INT_MAX) return -1; // Unreachable node
            res = max(res, ans[i]);
        }

        return res;
    }
};

