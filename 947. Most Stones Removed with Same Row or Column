On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.
A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.
Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone,
return the largest possible number of stones that can be removed.

Example 1:

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5

............................................DFS......................................................
class Solution {
public:
    void dfs(vector<vector<int>>& stones, int idx, vector<bool>& visited) {
        visited[idx] = true;
        for (int i = 0; i < stones.size(); i++) {
            int r = stones[idx][0];
            int c = stones[idx][1];
            if ((visited[i] == false) &&
                (stones[i][0] == r || stones[i][1] == c)) {
                dfs(stones, i, visited);
            }
        }
    }
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        vector<bool> visited(n, false);
        int grp = 0;
        for (int i = 0; i < n; i++) {
            if (visited[i] == false) {
                // continue;
                dfs(stones, i, visited);
                grp++;
            }
        }
        return (n - grp);
    }
};

..................*******************Solved by DSU****************************

class Solution {
public:
    vector<int> rank, parent;
    int find(int x) {
        if (x == parent[x]) {
            return x;
        }
        return parent[x] = find(parent[x]);
    }
    void Union(int x, int y) {
        int x_parent = find(x);
        int y_parent = find(y);
        if (x_parent == y_parent) {
            return;
        }
        if (rank[x_parent] > rank[y_parent]) {
            parent[y_parent] = x_parent;
        } else if (rank[y_parent] > rank[x_parent]) {
            parent[x_parent] = y_parent;
        } else {
            parent[x_parent] = y_parent;
            rank[y_parent] += 1;
        }
    }
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (stones[i][0] == stones[j][0] ||
                    stones[i][1] == stones[j][1]) {
                    Union(i, j);
                }
            }
        }
        int grp = 0;
        for (int i = 0; i < n; i++) {
            if (parent[i] == i) {
                grp++;
            }
        }
        return n - grp;
    }
};
