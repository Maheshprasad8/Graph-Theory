785. Is Graph Bipartite?

There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:

There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

CODE
Using DFSclass Solution {
public:
bool DFS(vector<vector<int>>& graph,int u,vector<int>&color,int currcolor){
    color[u]=currcolor;
    for(int &v:graph[u]){
        if(color[v]==color[u]){
            return false;
        }
        if(color[v]==-1){
            int colorV=1-currcolor;
            if(DFS(graph,v,color,colorV)==false){
                return false;
            }
        }
    }
    return true;
}
    bool isBipartite(vector<vector<int>>& graph) {
       int n=graph.size();
    //    REd-1
    // green-0
    //    unordered_map<int,vector<int>>adj;
    //    for(vector<int>&vec:graph){
    //     int uv=vec[0];
    //     int vu=vec[1];
    //     adj[uv].push_back(vu);
    //     adj[vu].push_back(uv);
    //    } 
       vector<int>color(n,-1);
       int currcolor;
       for(int i=0;i<n;i++){
        if(color[i]==-1){
            if(DFS(graph,i,color,1)==false){
                return false;
            }
        }
       }
       return true;
    }
};
