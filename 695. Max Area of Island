You are given an m x n binary matrix grid. An island is a group of 1's (representing land) 
connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 ................................DFS...............................................

class Solution {
public:
    vector<vector<int>> direction = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    int dfs(vector<vector<int>>& grid, int i, int j,
            vector<vector<bool>>& vis) {
        int r = grid.size();
        int c = grid[0].size();
        // int cnt = 0;
        int size=1;
        vis[i][j] = true;
        for (vector<int>& dir : direction) {
            int i_ = i + dir[0];
            int j_ = j + dir[1];
            if (i_ >= 0 && i_ < r && j_ >= 0 && j_ < c && grid[i_][j_] == 1 &&
                !vis[i_][j_]) {
                size+=dfs(grid, i_, j_, vis);
            //    size++;
            }
        }
        return size;
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        int cnt = 0;
        vector<vector<bool>> vis(r, vector<bool>(c, false));
        int maxm = 0;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] == 1 && !vis[i][j]) {
                    int area=dfs(grid, i, j, vis);
                   maxm=max(maxm,area);
                }
            }
        }
        // maxm = max(maxm, cnt);
        return maxm;
    }
};
